---
import { getAllPosts } from "@/lib/sanity";
import Base from "@/layouts/Base.astro";
import PageHeader from "@/components/PageHeader.astro";
import BlogList from "@/components/BlogList.astro"; // Use BlogList to display posts
import type { SanityPost, SanityCategory } from "@/types/sanity";

export async function getStaticPaths() {
  const allPosts: SanityPost[] = await getAllPosts();

  const uniqueCategories = new Map<string, { slug: string; title: string }>();

  allPosts.forEach((post) => {
    post.categories?.forEach((category) => {
      if (category?.slug?.current && category.title && !uniqueCategories.has(category.slug.current)) {
        uniqueCategories.set(category.slug.current, {
          slug: category.slug.current,
          title: category.title,
        });
      }
    });
  });

  const paths = Array.from(uniqueCategories.values()).map((category) => ({
    params: { category: category.slug },
    // Optionally pass props to the page component, like the title
    // props: { categoryTitle: category.title },
  }));

  return paths;
}

const { category } = Astro.params;
// const { categoryTitle } = Astro.props; // Get title from props if passed from getStaticPaths

// Fetch all posts again to filter (simplest approach for now)
const allPosts: SanityPost[] = await getAllPosts();

// Filter posts for the current category slug
const categoryPosts = allPosts.filter((post) =>
  post.categories?.some((cat) => cat?.slug?.current === category)
);

// Determine the category title (find the first post in the category and get its title)
// This assumes posts exist for the category, which should be true due to getStaticPaths
const categoryTitle = categoryPosts[0]?.categories?.find(cat => cat?.slug?.current === category)?.title || category;

// Basic page metadata
const pageData = {
  title: `${categoryTitle} Posts`,
  description: `Posts categorized under ${categoryTitle}`,
  // Add image if desired
};
---

<Base
  title={pageData.title}
  meta_title={pageData.title} 
  description={pageData.description}
>
  <section class="page-hero pt-16">
    <div class="container">
      {/* Use a generic title or pass categoryTitle */}
      <PageHeader page_data={{ title: `Category: ${categoryTitle}` }} />
    </div>
  </section>
  <section class="section">
    <div class="container">
      {categoryPosts.length > 0 ? (
        <BlogList posts={categoryPosts} />
      ) : (
        <p class="text-center">No posts found in this category.</p>
      )}
      {/* Add Pagination here if needed later */}
    </div>
  </section>
</Base>
