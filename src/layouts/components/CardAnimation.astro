---

interface Props {
  layers: number;
  cardsPerLayer: number[];
}

const { layers, cardsPerLayer } = Astro.props;

const getCardPositions = (layer: number, totalCards: number) => {
  const radius = 400 + layer * 150; // Çemberin sabit radius'u
  const angleStep = 360 / totalCards; // Eşit açı adımı (saat yönünde)
  const positions = [];
  
  for (let i = 0; i < totalCards; i++) {
    const positionAngle = angleStep * i; // Çemberdeki pozisyon açısı (0° = 12 yönü)
    const tiltAngle = -positionAngle; // Saat yönüne göre eğim açısı
    positions.push({
      positionAngle, // Çemberdeki yerleştirme açısı
      tiltAngle,    // Kartın kendi eğim açısı
      radius,
    });
  }
  return positions;
};

const getImagePath = (index: number) => {
  const imageNum = (index % 9) + 1;
  return `/images/users/user-${imageNum}.png`; // Resim yolu doğru olmalı
};
---

<div class="cardi-container">
    
    
    <!-- Logo -->
  <div class="cardi-layer">
    <img src="/images/koreci_applogo.png" alt="Logo" />
  </div>


  {Array.from({ length: layers }).map((_, layerIndex) => {
    const totalCards = cardsPerLayer[layerIndex]; // Her katman için farklı kart sayısı
    const positions = getCardPositions(layerIndex, totalCards);
    const diameter = 300 + layerIndex * 260; // Çemberin çapı
    const zIndexValue = layers - layerIndex; // İç katmanlar daha yüksek z-index'e sahip olacak
    return (
      <div
        class="cardi-layer"
        style={{
          '--diameter': `${diameter}px`,
          '--layer': layerIndex,
          '--z-index': zIndexValue, // Katman z-index'ini burada ayarlıyoruz
        }}
      >
        {positions.map((pos, cardIndex) => (
          <div
            class="cardi-wrapper"
            style={{
              '--position-angle': `${pos.positionAngle}deg`,
              '--radius': `${pos.radius}px`,
            }}
          >
            <div
              class="cardi"
              style={{
                '--tilt-angle': `${pos.tiltAngle}deg`,
                '--layer': layerIndex,
                '--z-index': zIndexValue, // Kartların z-index'i burada ayarlanıyor
              }}
            >
              <img src={getImagePath(cardIndex)} alt={`User ${cardIndex}`} />
            </div>
          </div>
        ))}
      </div>
    );
  })}
</div>

<style lang="scss">
.cardi-container {
  position: relative;
  width: 100vw;
  height: 400px;
  justify-content: center;
  align-items: center;
  //overflow: hidden;
  padding-bottom: 30rem;
  
}

.cardi-layer {
  position: absolute;
  width: var(--diameter);
  height: var(--diameter);
  top: 20%;
  left: 50%;
  transform: translate(-50%, -50%);
  border: 2px dashed rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: rotateLayer calc(50s - (var(--layer) * 3s)) infinite linear;
  z-index: var(--z-index); // Katman için dinamik z-index
  .logo {
  position: absolute; // Logoyu mutlak konumlandır
  top: 50%; // Dikeyde ortala
  left: 50%; // Yatayda ortala
  transform: translate(-50%, -50%); // Tam merkeze hizala
  z-index: 999; // Logoyu en üstte tut
  width: 100px; // Logo genişliği (isteğe bağlı)
  height: 100px; // Logo yüksekliği (isteğe bağlı)
}

.logo img {
  width: 100%;
  height: 100%;
  object-fit: contain; // Logonun oranlarını koru
}
}

.cardi-wrapper {
  position: absolute;
  top: 50%;
  left: 50%;
  transform-origin: center;
  z-index: var(--z-index); // Kartlar için z-index

  // Kartın çemberdeki pozisyonu
  transform: 
    translate(-50%, -50%)
    rotate(var(--position-angle))
    translateX(var(--radius));
}

.cardi {
    @apply relative h-full max-w-max rounded-xl bg-white p-5 shadow-lg;
  position: relative;
  width: 225px;
  height: 300px;
  transform-origin: center;
  z-index: var(--z-index); // Kartlar için z-index

  // Kartın saat yönüne göre eğimi ve ters yönde dönmesi
  transform: rotate(var(--tilt-angle));
  animation: rotateCardi calc(50s - (var(--layer) * 1s)) infinite linear reverse;
  transition: transform 0.3s ease;

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }

  &:hover {
    transform: rotate(var(--tilt-angle)) scale(1.2); // Hover ile büyüme
    z-index: 10; // Hover'da kartın öne çıkması için z-index'i arttırıyoruz
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.785); // Daha belirgin gölge
  }

  &-img {
    @apply w-full max-h-[210px] rounded-md object-cover lg:max-h-full lg:max-w-[40%] xl:max-w-[235px];
  }

  &-title {
    @apply mb-4 text-[19px] font-bold; // Font kalınlığı eklendi
  }

  &-content {
    @apply pt-6 lg:py-6 lg:pl-5;
  }

  &-tags {
    @apply absolute right-10 top-10 z-[1] mb-6;

    span {
      @apply bg-gray-200 px-2 py-1 rounded-full text-sm; // Etiket stilleri
    }
  }

  &-footer {
    @apply border-t border-border pb-0 pt-6;

    button {
      @apply bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600; // Buton stilleri
    }
  }
}


@keyframes rotateLayer {
  from {
    transform: translate(-50%, -50%) rotate(0deg);
  }
  to {
    transform: translate(-50%, -50%) rotate(360deg);
  }
}

@keyframes rotateCardi {
  from {
    transform: rotate(var(--tilt-angle));
  }
  to {
    transform: rotate(calc(var(--tilt-angle) + 360deg));
  }
}
</style>