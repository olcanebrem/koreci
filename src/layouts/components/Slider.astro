---
---

<div class="relative w-full overflow-hidden">
  <div class="slider flex transition-transform duration-500 ease-in-out">
    <div class="slide min-w-full">
      <img src="/image1.jpg" alt="Slide 1" class="w-full h-full object-cover">
    </div>
    <div class="slide min-w-full">
      <img src="/image2.jpg" alt="Slide 2" class="w-full h-full object-cover">
    </div>
    <div class="slide min-w-full">
      <img src="/image3.jpg" alt="Slide 3" class="w-full h-full object-cover">
    </div>
  </div>

  <button class="prev absolute top-1/2 left-4 transform -translate-y-1/2 bg-gray-800 text-white p-2 rounded-full hover:bg-gray-700 focus:outline-none">❮</button>
  <button class="next absolute top-1/2 right-4 transform -translate-y-1/2 bg-gray-800 text-white p-2 rounded-full hover:bg-gray-700 focus:outline-none">❯</button>
  <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
    <span class="dot w-3 h-3 bg-gray-400 rounded-full cursor-pointer"></span>
    <span class="dot w-3 h-3 bg-gray-400 rounded-full cursor-pointer"></span>
    <span class="dot w-3 h-3 bg-gray-400 rounded-full cursor-pointer"></span>
  </div>
</div>

<script>
  function initializeSlider() {
    const slider = document.querySelector('.slider');
    const slides = document.querySelectorAll('.slide');
    const prevBtn = document.querySelector('.prev');
    const nextBtn = document.querySelector('.next');
    const dots = document.querySelectorAll('.dot');
    let currentIndex = 0;

    // Null kontrolü
    if (!slider || !prevBtn || !nextBtn) {
      console.error('Slider elemanları bulunamadı.');
      return () => {}; // Temizleme fonksiyonu olarak boş bir fonksiyon döndür
    }

    function updateSlider() {
      slider.style.transform = `translateX(-${currentIndex * 100}%)`;
      dots.forEach((dot, index) => {
        dot.classList.toggle('bg-gray-800', index === currentIndex);
        dot.classList.toggle('bg-gray-400', index !== currentIndex);
      });
    }

    // Olay dinleyicileri
    const prevHandler = () => {
      currentIndex = currentIndex > 0 ? currentIndex - 1 : slides.length - 1;
      updateSlider();
    };

    const nextHandler = () => {
      currentIndex = currentIndex < slides.length - 1 ? currentIndex + 1 : 0;
      updateSlider();
    };

    const dotHandlers = Array.from(dots).map((dot, index) => {
      const handler = () => {
        currentIndex = index;
        updateSlider();
      };
      dot.addEventListener('click', handler);
      return handler;
    });

    prevBtn.addEventListener('click', prevHandler);
    nextBtn.addEventListener('click', nextHandler);

    updateSlider(); // İlk yüklemede slider’ı başlat

    // Temizleme fonksiyonu: Olay dinleyicilerini kaldır
    return () => {
      prevBtn.removeEventListener('click', prevHandler);
      nextBtn.removeEventListener('click', nextHandler);
      dots.forEach((dot, index) => {
        dot.removeEventListener('click', dotHandlers[index]);
      });
    };
  }

  // Sayfanın her yüklenmesinde (View Transitions dahil) çalıştır
  document.addEventListener('astro:page-load', () => {
    const cleanup = initializeSlider();
    // Sayfadan ayrıldığında temizleme yap (isteğe bağlı)
    document.addEventListener('astro:before-preparation', cleanup, { once: true });
  });
</script>